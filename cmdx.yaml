---
# the configuration file of cmdx - task runner
# https://github.com/suzuki-shunsuke/cmdx
tasks:
  - name: scaffold
    short: s
    usage: Scaffold the configuration for a given package
    description: |
      Scaffold the configuration for a given package

      e.g.

      $ cmdx s cli/cli

      After scaffolding, tests are run.

    flags:
      - name: recreate
        short: r
        type: bool
        usage: Recreate the container
        script_envs:
          - IS_RECREATE
      - name: cmd
        type: string
        usage: A list of commands joined with commas ','
        script_envs:
          - CMD
      - name: limit
        type: string
        usage: The maximum number of versions
        script_envs:
          - LIMIT
    shell:
      - "bash"
      - "-c"
    script: |
      set -eu

      bash scripts/check_commands.sh
      bash scripts/check_gpgsign.sh
      bash scripts/check_diff.sh
      bash scripts/checkout.sh "$PACKAGE"

      if [ "$IS_RECREATE" = true ]; then
        aqua exec -- cmdx rm
      fi

      bash scripts/start.sh
      bash scripts/scaffold.sh "$PACKAGE" "$CMD" "$LIMIT"
      aqua exec -- cmdx gr
      bash scripts/commit.sh "$PACKAGE"
      bash scripts/test.sh "$PACKAGE"
      bash scripts/start.sh aqua-registry-windows
      bash scripts/test-windows.sh "$PACKAGE"
    args:
      - name: package
        usage: a package name. e.g. `cli/cli`
        required: true
        script_envs:
          - PACKAGE

  - name: test
    short: t
    usage: Test a given package in the container
    description: |
      Test a given package in the container.

      $ cmdx t [-r] <package name>

      Tests are run on all platforms with AQUA_GOOS and AQUA_GOARCH same with CI in a container.

      If the test fails, bash is attached to the container for debugging.
      If you want to exit from the container, please run exit.
    flags:
      - name: recreate
        short: r
        type: bool
        usage: Recreate the container
        script_envs:
          - IS_RECREATE
    args:
      - name: package
        usage: a package name. e.g. `cli/cli`
        required: true
        script_envs:
          - PACKAGE
    shell:
      - "bash"
      - "-c"
    script: |
      set -eu
      if [ "$IS_RECREATE" = true ]; then
        cmdx rm
      fi
      bash scripts/start.sh
      bash scripts/test.sh "$PACKAGE"
      bash scripts/start.sh aqua-registry-windows
      bash scripts/test-windows.sh "$PACKAGE"
      aqua exec -- aqua-registry gr

  - name: connect
    short: con
    usage: Connect to the container
    description: |
      Connect to the container

      $ cmdx connect <os> <arch>

      e.g.

      $ cmdx connect linux amd64

      You need to specify os and arch.
      These arguments are set to AQUA_GOOS and AQUA_GOARCH.
    args:
      - name: os
        required: false
        default: linux
        script_envs:
          - OS
      - name: arch
        required: false
        script_envs:
          - ARCH
    shell:
      - "bash"
      - "-c"
    script: bash scripts/connect.sh

  - name: generate-registry
    short: gr
    usage: Update registry.yaml
    description: |
      Update registry.yaml

      $ cmdx gr
    shell:
      - "bash"
      - "-c"
    script: aqua exec -- aqua-registry gr

  - name: new
    usage: Create a branch, a commit, and a pull request to add a given package
    description: |
      Create a branch, a commit, and a pull request to add a given package.

      $ cmdx new <package name>

      e.g.

      $ cmdx new cli/cli
    shell:
      - "bash"
      - "-c"
    script: |
      set -euo pipefail
      bash scripts/check_diff_package.sh
      pkg=$(bash scripts/get_pkg_from_branch.sh "$PACKAGE")
      aqua exec -- aqua-registry create-pr-new-pkg "$pkg"
    args:
      - name: package
        usage: a package name. e.g. cli/cli
        script_envs:
          - PACKAGE

  - name: stop
    usage: Stop containers
    description: |
      Stop containers.

      $ cmdx stop
    script: |
      set -eu
      bash scripts/stop.sh
      bash scripts/stop.sh aqua-registry-windows

  - name: remove
    short: rm
    usage: Remove containers
    description: |
      Remove containers.

      $ cmdx rm
    script: |
      set -eu
      bash scripts/remove_container.sh
      bash scripts/remove_container.sh aqua-registry-windows

  - name: start
    usage: Start containers
    description: |
      Start containers.

      $ cmdx start
    flags:
      - name: recreate
        short: r
        type: bool
        usage: Recreate the container
        script_envs:
          - IS_RECREATE
    shell:
      - "bash"
      - "-c"
    script: |
      set -eu
      if [ "$IS_RECREATE" = true ]; then
        cmdx rm
      fi
      bash scripts/start.sh
      bash scripts/start.sh aqua-registry-windows

  - name: release
    short: r
    description: Release the new version
    usage: Release the new version
    script: |
      set -eu
      git tag -m "chore: release $VERSION" "$VERSION"
      git push origin "$VERSION"
    args:
      - name: version
        required: true
        script_envs:
          - VERSION
        validate:
          - regexp: "^v\\d+\\.\\d+.\\d+(-\\d+)?$"

  - name: resolve-conflict
    description: Resolve the conflict of registry.yaml
    usage: Resolve the conflict of registry.yaml
    args:
      - name: pr
        required: true
        script_envs:
          - PR_NUMBER
    script: |
      set -eu
      git fetch origin main
      gh pr checkout "$PR_NUMBER"
      tempfile=$(mktemp)
      cp registry.yaml "$tempfile"
      git merge origin/main || :
      mv "$tempfile" registry.yaml
      cmdx gr
      git add registry.yaml
      git commit
